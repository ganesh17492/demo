plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.1.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.owasp.dependencycheck' version '8.2.1'
	id 'com.diffplug.spotless' version '6.18.0'
	id "org.sonarqube" version "4.2.1.3168"
}


group = 'com.example.demo'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}


dependencies {
	compileOnly 'org.projectlombok:lombok' , "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor 'org.projectlombok:lombok' , "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	// Reactive
	implementation("org.springframework.boot:spring-boot-starter")
	implementation("org.springframework.boot:spring-boot-starter-webflux")
	implementation("org.springframework:spring-web")
	implementation ("org.springframework.cloud:spring-cloud-starter-openfeign")
	implementation("io.github.resilience4j:resilience4j-spring-boot3")
	implementation("io.github.resilience4j:resilience4j-all")
	implementation("io.github.resilience4j:resilience4j-reactor")

	//validation
	implementation("jakarta.validation:jakarta.validation-api:${validationApiVersion}")


	//Logging and Monitoring
	implementation("org.springframework.boot:spring-boot-starter-actuator")
	implementation("org.springframework.boot:spring-boot-starter-aop")
	implementation("org.springframework.boot:spring-boot-starter-logging")
	runtimeOnly("net.logstash.logback:logstash-logback-encoder:${logbackEncoderVersion}")

	//Test dependencies,
	testImplementation("org.springframework.boot:spring-boot-starter-test"){
		exclude group: 'junit', module: 'junit'
	}
	testImplementation("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
	testImplementation("io.projectreactor:reactor-test")
	testImplementation("com.squareup.okhttp3:mockwebserver:${okHttpVersion}")
	testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	implementation("com.squareup.okhttp3:okhttp:${okHttpVersion}")

	//tracing
	implementation 'io.micrometer:micrometer-tracing-bridge-brave'

	//redis
	//implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'

	//swagger
	implementation("org.springdoc:springdoc-openapi-starter-webflux-ui:${openApiVersion}")

	//dependency vulnerabilities fix
	implementation("org.yaml:snakeyaml:2.0")
	implementation("commons-fileupload:commons-fileupload:1.5")

}

dependencyManagement {
	imports {
		mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
		mavenBom("io.github.resilience4j:resilience4j-bom:${resilience4jVersion}")
	}

}

dependencyCheck {
	analyzers {
		retirejs {
			enabled = false
		}
	}
	outputDirectory = file("$buildDir/reports/dependency-check")
}

dependencyCheckAnalyze {

}

spotless {
	java {
		toggleOffOn()
		googleJavaFormat()
		importOrder('java', 'javax', 'org', 'com')
		removeUnusedImports()
		trimTrailingWhitespace()
		endWithNewline()
	}

	kotlin {
		ktlint()
	}
}

spotlessApply {
	dependsOn dependencyCheckAnalyze
}

test {
	dependsOn spotlessApply
	testLogging {
		events "PASSED", "SKIPPED", "FAILED"
	}
	useJUnitPlatform()

	finalizedBy jacocoTestReport // report is always generated after tests run

}


jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	reports {
		html {
			outputLocation = file("$buildDir/reports/jacoco-coverage")
		}
	}

	executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
	// Exclude the class from the coverage calculation
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/commons/config/**',
					'**/commons/constant/**'
			])
		}))
	}

	jacocoTestCoverageVerification {
		dependsOn jacocoTestReport
		sourceDirectories.setFrom(files("${buildDir}/reports/jacoco-coverage"))
		violationRules {
			rule {
				limit {
					minimum = Double.parseDouble("${codeCoverageMinPercentage}")
				}
			}
		}
	}
}

sonar {
	properties {
		property "sonar.java.coveragePlugin", "jacoco"
		property "sonar.coverage.exclusions", [
				'**/commons/config/**',
				'**/commons/constant/**'
		]
		property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
	}
}